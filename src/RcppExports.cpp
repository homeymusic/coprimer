// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// stern_brocot_tree
DataFrame stern_brocot_tree(const int x);
RcppExport SEXP _coprimer_stern_brocot_tree(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stern_brocot_tree(x));
    return rcpp_result_gen;
END_RCPP
}
// first_coprime
DataFrame first_coprime(const NumericVector x, const NumericVector lower_uncertainty, const NumericVector upper_uncertainty);
RcppExport SEXP _coprimer_first_coprime(SEXP xSEXP, SEXP lower_uncertaintySEXP, SEXP upper_uncertaintySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type lower_uncertainty(lower_uncertaintySEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type upper_uncertainty(upper_uncertaintySEXP);
    rcpp_result_gen = Rcpp::wrap(first_coprime(x, lower_uncertainty, upper_uncertainty));
    return rcpp_result_gen;
END_RCPP
}
// nearby_coprime
DataFrame nearby_coprime(const NumericVector x, const NumericVector lower_uncertainty, const NumericVector upper_uncertainty);
RcppExport SEXP _coprimer_nearby_coprime(SEXP xSEXP, SEXP lower_uncertaintySEXP, SEXP upper_uncertaintySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type lower_uncertainty(lower_uncertaintySEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type upper_uncertainty(upper_uncertaintySEXP);
    rcpp_result_gen = Rcpp::wrap(nearby_coprime(x, lower_uncertainty, upper_uncertainty));
    return rcpp_result_gen;
END_RCPP
}
// rational_fractions
DataFrame rational_fractions(const NumericVector& x, double x_ref, double uncertainty);
RcppExport SEXP _coprimer_rational_fractions(SEXP xSEXP, SEXP x_refSEXP, SEXP uncertaintySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type x_ref(x_refSEXP);
    Rcpp::traits::input_parameter< double >::type uncertainty(uncertaintySEXP);
    rcpp_result_gen = Rcpp::wrap(rational_fractions(x, x_ref, uncertainty));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_coprimer_stern_brocot_tree", (DL_FUNC) &_coprimer_stern_brocot_tree, 1},
    {"_coprimer_first_coprime", (DL_FUNC) &_coprimer_first_coprime, 3},
    {"_coprimer_nearby_coprime", (DL_FUNC) &_coprimer_nearby_coprime, 3},
    {"_coprimer_rational_fractions", (DL_FUNC) &_coprimer_rational_fractions, 3},
    {NULL, NULL, 0}
};

void register_coprimer_callables(DllInfo* dll);
RcppExport void R_init_coprimer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
    register_coprimer_callables(dll);
}
